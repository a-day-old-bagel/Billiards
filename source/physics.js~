var physics = {
  cBallStart    : vec2(0.0, 1.2),
  cueOffsetY    : 0.02,
  ballRadius    : 0.0575,
  ballDiam      : undefined,
  ballVelDead   : 0.00001,
  ballCircum    : undefined,
  tableBoundsZ  : 1.6558,
  tableBoundsX  : 0.823,
  cornPockSize  : 0.06,
  cornPockRad   : 0.1,
  sidePockSize  : 0.07,
  sidePockRad   : 0.1,
  oldTime       : performance.now(),
  readyToStrike : false,
  
  animate : function() {
    
    newTime = performance.now();
    var dt = newTime - this.oldTime;    
    
    camera.tickShmooze(dt);
    
    var aBallHasMoved = false;
    for (i = 0; i < 16; ++i) {
      if (ball.isMoving[i] && ball.isActive[i]) {
        aBallHasMoved = true;
        var oldPos = ball.position[i];
        ball.position[i] = add(ball.position[i], scale(dt, ball.velocity[i]));
        
        // ball collisions      
        for (j = 0; j < 16; ++j) {        
          if (j == i || ball.isActive[j] == false) {
            continue;
          }
          var vec21 = subtract(ball.position[i], ball.position[j]);
          var len21 = length(vec21);
          if (len21 < this.ballDiam) {  // if balls are colliding         
            var vel1i = ball.velocity[i];          
            var refFrameCompensator = undefined;
            if (ball.isMoving[j]) { // if both balls are in motion, use Gallilean reference frames
                                    // to resolve collision as a single-ball-moving scenario
              refFrameCompensator = ball.velocity[j];
              vel1i = subtract(vel1i, refFrameCompensator);              
            } else {
              refFrameCompensator = null;
            }            
            // now here's the single-ball-moving problem that will always be easy to solve
            var magVel1i = length(vel1i);
            var normVel1i = scale(1 / magVel1i, vel1i);
            var vec21DotVel1i = dot(vec21, vel1i);
            var projVel1iVec21 = scale(vec21DotVel1i / dot(vel1i, vel1i), vel1i);
            var orthoVel1i = subtract(vec21, projVel1iVec21);
            var distNearestTo2 = length(orthoVel1i);            
            var trueCollCorrection = Math.sqrt(Math.pow(this.ballDiam, 2) - Math.pow(distNearestTo2, 2));
            var trueVec21 = subtract(orthoVel1i, scale(trueCollCorrection, normVel1i));
            var normTrueVec12 = scale(-1 / length(trueVec21), trueVec21);
            var weight = dot(normTrueVec12, normVel1i);
            
            var pos1f = add(ball.position[j], trueVec21);
            var extraMovement = length(subtract(ball.position[i], pos1f));
            
            var vel2f = scale(weight * magVel1i, normTrueVec12);
            var pos2f = add(ball.position[j], scale(extraMovement * weight, normTrueVec12));
            
            var vel1f = subtract(vel1i, vel2f);
            var normVel1f = scale(1 / length(vel1f), vel1f);
            pos1f = add(pos1f, scale((1 - weight) * extraMovement, normVel1f));
            
            ball.position[i] = pos1f;
            ball.position[j] = pos2f;
            ball.velocity[i] = vel1f;
            ball.velocity[j] = vel2f;
            ball.isMoving[j] = true;
            
            if (refFrameCompensator != null) {
              ball.velocity[i] = add(ball.velocity[i], refFrameCompensator);
              ball.velocity[j] = add(ball.velocity[j], refFrameCompensator);
            }        
          }
        }
        
        // bumper and pocket collisions
        if (ball.position[i][1] > this.tableBoundsZ) {
          if (Math.abs(ball.position[i][0]) < this.tableBoundsX - this.cornPockSize) {
            ball.position[i][1] = this.tableBoundsZ - (ball.position[i][1] - this.tableBoundsZ);
            ball.velocity[i][1] *= -0.9;
          } else if (ball.position[i][0] > 0){
            if (ball.position[i][0] > this.tableBoundsX + this.cornPockRad ||
                ball.position[i][1] > this.tableBoundsZ + this.cornPockRad) {
              ball.isActive[i] = false;
            }
          } else {
            if (ball.position[i][0] < -this.tableBoundsX - this.cornPockRad
                || ball.position[i][1] > this.tableBoundsZ + this.cornPockRad) {
              ball.isActive[i] = false;
            }
          }          
        } else if (ball.position[i][1] < -this.tableBoundsZ) {
          if (Math.abs(ball.position[i][0]) < this.tableBoundsX - this.cornPockSize) {
            ball.position[i][1] = -this.tableBoundsZ - (ball.position[i][1] + this.tableBoundsZ);
            ball.velocity[i][1] *= -0.9;
          } else if (ball.position[i][0] > 0) {
            if (ball.position[i][0] > this.tableBoundsX + this.cornPockRad
                || ball.position[i][1] < -this.tableBoundsZ - this.cornPockRad) {
              ball.isActive[i] = false;
            }
          } else {
            if (ball.position[i][0] < -this.tableBoundsX - this.cornPockRad
                || ball.position[i][1] < -this.tableBoundsZ - this.cornPockRad) {
              ball.isActive[i] = false;
            }
          }
        }
        if (ball.position[i][0] > this.tableBoundsX) {
          if (Math.abs(ball.position[i][1]) > this.sidePockSize &&
              Math.abs(ball.position[i][1]) < this.tableBoundsZ - this.cornPockSize) {
            ball.position[i][0] = this.tableBoundsX - (ball.position[i][0] - this.tableBoundsX);
            ball.velocity[i][0] *= -0.9;
          } else if (Math.abs(ball.position[i][1]) <= this.sidePockSize) {
            if (ball.position[i][0] > this.tableBoundsX + this.sidePockRad) {
              ball.isActive[i] = false;
            }
          }      
        } else if (ball.position[i][0] < -this.tableBoundsX) {
          if (Math.abs(ball.position[i][1]) > this.sidePockSize &&
              Math.abs(ball.position[i][1]) < this.tableBoundsZ - this.cornPockSize) {
            ball.position[i][0] = -this.tableBoundsX - (ball.position[i][0] + this.tableBoundsX);
            ball.velocity[i][0] *= -0.9;  
          } else if (Math.abs(ball.position[i][1]) <= this.sidePockSize) {
            if  (ball.position[i][0] < -this.tableBoundsX - this.sidePockRad) {
              ball.isActive[i] = false;
            }
          }       
        }
        
        // apply velocity damping (physics phriction phudge)
        ball.velocity[i] = scale(0.99, ball.velocity[i]);
        if (length(ball.velocity[i]) < this.ballVelDead) {
          ball.isMoving[i] = false;
          ball.velocity[i] = [0, 0];
        }
        
        // calculate visual rotation based on translation
        oldPos = subtract(ball.position[i], oldPos);
        if (length(oldPos) > 0) {
          ball.angle[i] = length(oldPos) * this.ballCircum;
          ball.axis[i] = normalize(cross([oldPos[0], 0, oldPos[1]], [0, -1, 0]));
        }
      }
    }
    
    // determine if all balls have stopped
    if (!aBallHasMoved && !this.readyToStrike) {
      camera.changeZoomFocus( 
        vec3(ball.mat_model[0][0][3],
        ball.yPlane + 0.14,
        ball.mat_model[0][2][3]));
      cue.focus = [ball.position[0][0], 0.0, ball.position[0][1]];
      this.readyToStrike = true;
    }
    
    if (cue.strikeAnimCounter > 0) {
      cue.strikeAnim(dt);
    }
    
    this.oldTime = newTime;
  },
  
  strikeCueBall : function() {
    if (length(arrow.vec_whack) > this.ballVelDead) {
      ball.velocity[0][0] += arrow.vec_whack[0] * 0.01;
      ball.velocity[0][1] += arrow.vec_whack[1] * 0.01;
      ball.isMoving[0] = true;
      this.readyToStrike = false;
    }
  },
  
  setUpBalls : function() { // move balls into starting triangle
    var triPosZ = -0.6;
    var spacingZ = 0.14;
    var halfSpcX = spacingZ * 0.55;    
    ball.position[0]  = vec2(this.cBallStart[0], this.cBallStart[1]);
    ball.position[1]  = vec2(halfSpcX *  0, triPosZ - spacingZ * 0);
    ball.position[2]  = vec2(halfSpcX *  2, triPosZ - spacingZ * 4);
    ball.position[3]  = vec2(halfSpcX * -2, triPosZ - spacingZ * 4);
    ball.position[4]  = vec2(halfSpcX * -4, triPosZ - spacingZ * 4);
    ball.position[5]  = vec2(halfSpcX *  3, triPosZ - spacingZ * 3);
    ball.position[6]  = vec2(halfSpcX * -2, triPosZ - spacingZ * 2);
    ball.position[7]  = vec2(halfSpcX * -1, triPosZ - spacingZ * 3);
    ball.position[8]  = vec2(halfSpcX *  0, triPosZ - spacingZ * 2);
    ball.position[9]  = vec2(halfSpcX *  2, triPosZ - spacingZ * 2);
    ball.position[10] = vec2(halfSpcX * -1, triPosZ - spacingZ * 1);
    ball.position[11] = vec2(halfSpcX *  1, triPosZ - spacingZ * 1);
    ball.position[12] = vec2(halfSpcX *  1, triPosZ - spacingZ * 3);
    ball.position[13] = vec2(halfSpcX * -3, triPosZ - spacingZ * 3);
    ball.position[14] = vec2(halfSpcX *  0, triPosZ - spacingZ * 4);
    ball.position[15] = vec2(halfSpcX *  4, triPosZ - spacingZ * 4);
  },
  
  init : function() {
  
    this.ballDiam = this.ballRadius * 2;
    this.ballCircum = 360 / (this.ballRadius * Math.PI * 2);
    
    cue.init(ball.yPlane, this.ballRadius);
    
    this.setUpBalls();
  },
  
  destroy : function () {
    console.log('Physics Self-Destruct');
  }
}
